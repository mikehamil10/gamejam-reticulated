<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprAvatarIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprAvatarIdle</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Player Initialization

// _______________________________________________________Adjustable Properties
speedX    = 5;      // horizontal velocity
jumpForce = 1500;   // vertical velocity when jumping
image_speed   = 0.2;    // animation speed
health        = 3;      // "hit points" the player starts with

// __________________________________________________________Flags. Don't Edit!
isJumping = false;
suck = false;
spriteMode = 0;
canResetJump = false;
hitFrame = false;
suckDirection = "";
hitBlinkCounter=1;
phy_fixed_rotation = true;
tapCheck=1;
blinkFrameLength=7;
gonnaHurt=0;
invincibilityTime=180;

//self.x=global.checkpointX;
//self.y=global.checkpointY;
 
scrVacuumBuild();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>self.hitFrame = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
XBox 360 Controls
=================
A: button1
B: button2
X: button3
Y: button4
*/

/*
Because sucking and blowing use the same animation, we can't use the sprite to identify
which mode the dwarf is in, so I made a spriteMode variable with the following meanings:
0: idle
1: walk right
2: walk left
3: jumping (falling?)
4: sucking
5: blowing
*/

// Movement input checks:
input_left = (keyboard_check(vk_left) || (joystick_exists(1) &amp;&amp; joystick_direction(1) == vk_numpad4));
input_right = (keyboard_check(vk_right) || (joystick_exists(1) &amp;&amp; joystick_direction(1) == vk_numpad6));
input_jump = (keyboard_check(vk_space) || (joystick_exists(1) &amp;&amp; joystick_check_button(1, 1)));


//move to the next room on esc
if (DevFlag==1 &amp;&amp; keyboard_check_pressed(vk_escape)){
    if(room_next(room) != -1)
    {               room_goto_next();    }
    }    
if (DevFlag==1 &amp;&amp; keyboard_check_pressed(vk_backspace)){
    
                   room_restart();    
    }      
    

if (self.phy_speed_y &gt;injuryVelocity*3 &amp;&amp; self.hitFrame==false){
self.gonnaHurt=3;
} else if (self.phy_speed_y &gt;injuryVelocity*2 &amp;&amp; self.hitFrame==false){
self.gonnaHurt=2;
}else if (self.phy_speed_y &gt;injuryVelocity &amp;&amp; self.hitFrame==false){
self.gonnaHurt=1;
}

// are we currently in the middle of the 'suck' animation?
if (self.spriteMode == 4) {
    // Yes. Don't allow movement, and wait until the animation is done
    phy_speed_x = 0;
    if (image_index &gt; 11) {
        sprite_index = sprAvatarIdle;
        image_index = 1;
        //reset sucking counter so we can suck another object
        self.suck = 0;
        self.spriteMode = 0;
    } else if (image_index &gt; 6 &amp;&amp; self.suck == 0){
        //don't suck up more than one object
        self.suck = 1;
        //suck up the object in the middle of the animation
        var targetX = self.phy_position_x;
        var targetY = self.phy_position_y;
        //update the suck coordinates based on the direction we're facing
        if(self.suckDirection == "side"){
            targetX -= (image_xscale * halfCharWidth);
        } else if(self.suckDirection == "up"){
            targetY -= 96;
        } else if(self.suckDirection == "down"){
            targetY += 96;
        }
        targetY += 48;
        //check if the nearest object is within range and suckable
        var suckTarget = scrSuckObject(targetX, targetY);
        scrVacuumSuck(suckTarget);
    }
} else if (self.spriteMode == 5) {
    // Yes. Don't allow movement, and wait until the animation is done
    phy_speed_x = 0;
    if (image_index &gt; 11) {
        sprite_index = sprAvatarIdle;
        image_index = 1;
        //reset sucking counter so we can spit out another object
        self.suck = 0;
        self.spriteMode = 0;
    } else if (image_index &gt; 6 &amp;&amp; self.suck == 0 ){

                //don't spit out more than one object
        self.suck = 1;
        //spit shit out
        var item = scrVacuumBlow();
        //find the location we want to start the object to appear around
        if(item != "" ){
            var targetX = self.phy_position_x;
            var targetY = self.phy_position_y;
//NML TODO Add Shooting mechanisim on long press
            
            //ensure proper horizontal blowing target:
            targetX += 48 - (96 * image_xscale);
            targetY += 96;
            
//placing when tapCheck&lt;12
            //instanceofGas = instance_nearest(targetX,targetY,objGasBlock);
           if (DevFlag==1){
            with instance_nearest(targetX,targetY,objGasBlock){
            instance_destroy();
            }
            }            
            with instance_nearest(targetX,targetY,objGas01){
            instance_destroy();
            }
            
            if(item == "dirt"){
                show_debug_message("Pre dirt: x: " + string(targetX) + "   y: " + string(targetY));
                targetX = targetX - (targetX % 96);
                targetY = targetY - (targetY % 96);
                show_debug_message("Post dirt: x: " + string(targetX) + "   y: " + string(targetY));
                var i = 0;
                with(objDirtBlock){
                    if(i == 0){
                        show_debug_message("blowing dirt:");
                        if(place_free(targetX, targetY))
                        {
                         if(longPress){
                          //shoot stuff
                         } else{
                                instance_create(targetX, targetY, objDirtBlock);
                        }
                        }else 
                        {
                            scrVacuumSuck("dirt");
                        }
                        i = 1;
                    }
                }
            } else if(item == "bomb"){
                show_debug_message("Pre bomb: x: " + string(targetX) + "   y: " + string(targetY));
                targetX = targetX - (targetX % 96)
                targetY = targetY - (targetY % 96)
                show_debug_message("Post bomb: x: " + string(targetX) + "   y: " + string(targetY));
                var i = 0;
                with(objBomb){
                    if(i == 0){
                        show_debug_message("blowing bomb:");
                        if(place_free(targetX, targetY))
                        {
                         if(longPress){
                          //shoot stuff
                          }else{
                                instance_create(targetX, targetY, objBomb);
                        }
                        }else 
                        {
                            scrVacuumSuck("bomb");
                        }
                        i = 1;
                    }
                }
            }
            
   
        }//if blowing


    }
} else {
    // Not sucking or blowing. Handle movement
    
    if ((input_left &amp;&amp; input_right) || (!input_left &amp;&amp; !input_right)) { //If pressing left and right or neither, stop movement:
        phy_speed_x = 0;
        sprite_index = sprAvatarIdle;
        image_index = 1;
        self.spriteMode = 0;
    }
    else if (input_left) {  //If only left, move left:
    
        image_xscale = 1;
        phy_speed_x = -self.speedX;
        
        //Switch to walking animation if not jumping:
        if (self.isJumping) sprite_index = sprAvatarIdle; 
        else {
            sprite_index = sprAvatarWalk;
            self.spriteMode = 2;
        }
    } 
    else if (input_right) { //If only right, move right:
    
        image_xscale = -1;
        phy_speed_x = self.speedX;
        
        //Switch to walking animation if not jumping:
        if (self.isJumping) sprite_index = sprAvatarIdle; 
        else {
            sprite_index = sprAvatarWalk;
            self.spriteMode = 1;
        }
    }
    
    // ________________________________________________________________ Jumping
    if (phy_speed_y != 0) { //Ensure "jumping" status when falling without "jump" input.  
        self.isJumping = true;
        self.canResetJump = false;
    }
    else if (!self.isJumping &amp;&amp; self.canResetJump &amp;&amp; input_jump) {
        physics_apply_impulse(phy_position_x, phy_position_y, 0, -self.jumpForce);
        self.isJumping = true;
        self.canResetJump = false;
        self.spriteMode = 3;
    }
    
    // ________________________________________________________________ Sucking
    if ((keyboard_check_pressed(vk_lcontrol) &amp;&amp; keyboard_check(vk_down)) || (joystick_exists(1) &amp;&amp; joystick_check_button(1, 3) &amp;&amp; joystick_direction(1) == vk_numpad2)){
        audio_play_sound(sndVacuumForward, 100, false);
        self.suckDirection = "down";
        isSucking = true;
        sprite_index = sprAvatarSuckDown;
        self.spriteMode = 4;
    } else if ((keyboard_check_pressed(vk_lcontrol) &amp;&amp; keyboard_check(vk_up)) || (joystick_exists(1) &amp;&amp; joystick_check_button(1, 3) &amp;&amp; joystick_direction(1) == vk_numpad8)){
        audio_play_sound(sndVacuumForward, 100, false);
        self.suckDirection = "up";
        isSucking = true;
        sprite_index = sprAvatarSuckUp;
        self.spriteMode = 4;
    } else if (keyboard_check_pressed(vk_lcontrol) || (joystick_exists(1) &amp;&amp; joystick_check_button(1, 3))) {
        audio_play_sound(sndVacuumForward, 100, false);
        self.suckDirection = "side";
        isSucking = true;
        sprite_index = sprAvatarSuck;
        self.spriteMode = 4;
    } else if (keyboard_check_pressed(vk_lshift) || (joystick_exists(1) &amp;&amp; joystick_check_button(1, 2))) {
        tapCheck++;
        audio_play_sound(sndVacuumReverse, 100, false);
        isSucking = true;
        sprite_index = sprAvatarSuck;
        self.spriteMode = 5;
    } else if ((keyboard_check_released(vk_lshift) || (joystick_exists(1) &amp;&amp; !joystick_check_button(1, 2)))) {
//nevermind
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objExplosion">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if(!self.hitFrame &amp;&amp; DevFlag !=1){
  // self.hitFrame = true; 
   // health--;
   // health --;
    //alarm[1] = 180;
    
    physics_apply_force(self.x, self.y, sign(self.x-other.x)*other.xForce, sign(self.y-other.y)*other.yForce)
//}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="enemSpider">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!self.hitFrame){
    health--;
    alarm[1] = self.invincibilityTime;
    self.hitFrame = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="enemMole">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!self.hitFrame){
    health--;
    alarm[1] = self.invincibilityTime;
    self.hitFrame = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBlock">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// COLLISION NOTES (9/29):  While a restitution value (avatar's "bounciness") of 0 gives a smoother
// game feel, this causes some movement glitches in the physics engine due to our tiled mix of
// dual-purpose wall/floor blocks.  I may know how to handle that issue, but it'll take a little 
// more time. 
//  
// Uncomment the physics function and flag in the top of the code for the avatar's draw event to
// see what's going on there.  The engine seems to deform its collision pre-checks based on speed, 
// which is why the pink boxes shown behave the way they do.  
//
// I've set the restitution as low as I can for the engine to behave as we need it to.  Higher values 
// create a slight sensation of friction, and can lead to jumps coming up short if held against walls.  
// There's still a lot to learn about this physics engine, but I'm confident we can get a nicely polished
// feel soon even with what I know now.  I've set the collision mask for the avatar back to a rectangle, 
// due to jumping issues caused by the previously outward-sloped edges.  I understand we'll want 
// more a more accurate collision mask for enemy collisions, so in the future we may have to use
// separate masks to differentiate and get the right behavior.  
//
// Still isn't perfect, but it's getting somewhere.  Next on my list is the sucking/blowing bugs
// (which actually are simple fixes, I promise), before returning to the jump stuff.  --Mark  


// Check whether avatar is on the ground:
if (phy_col_normal_y == -1) {
    self.isJumping = false;
    // If the jump imput is held down, don't allow player to "bounce":
    if !(self.input_jump) {
        self.canResetJump = true;
    }
}

/*----------------------------------- old jumping code: -------------------------------------
dx = self.x - other.x;
dy = self.y - other.y;


if (dx != 0) {
    if ((dy/dx) &lt; 2*halfBlockWidth) {
        physics_apply_impulse(phy_position_x, phy_position_y, 0, -15*sign(dx));
    }
}


if (dy != 0) {
    if (((sign(dx)*dx)/dy) &gt; -0.44) {
        bottom_hit = true;
    }
    else {
        bottom_hit = false;
    }
}
else {
    bottom_hit = false;//This needs to be everywhere but the collision code...
    
}

if (bottom_hit &amp;&amp; phy_linear_velocity_y &lt; 10) {
        self.canResetJump = true;
        self.isJumping = false;
}

--------------------------------- end of old jumping code ---------------------------------*/




/*---------------------------------- painful fall code: -------------------------------------
 //If falling fast, take damage 
 //STILL GLITCHY!!
 
 
if (bottom_hit &amp;&amp; self.gonnaHurt==1 &amp;&amp; self.hitFrame==false){ //physics_
alarm[1] = self.invincibilityTime;
//audio_play_sound(sndHitGroan,1,0); //;p

if DevFlag==1{
//hehe
}else{
health=health-self.gonnaHurt;
}
self.gonnaHurt=0;
self.hitFrame=true;
}

---------------------------------- end painful fall code ----------------------------------*/
 

 


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="9">
      <action>
        <libid>1</libid>
        <id>223</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_current_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>223</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_current_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//flag = phy_debug_render_collision_pairs | phy_debug_render_aabb;
//physics_world_draw_debug(flag);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>self.hitFrame</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>(self.hitBlinkCounter mod self.blinkFrameLength)==1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>543</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sprite_color</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>13</kind>
            <string>255</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>-1</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>(self.hitBlinkCounter mod (2*self.blinkFrameLength))==1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>543</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sprite_color</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>13</kind>
            <string>16777215</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>500</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring>draw_self();</codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(self.hitFrame ==1){
self.hitBlinkCounter++;
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>self.hitFrame</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>543</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sprite_color</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>13</kind>
            <string>16777215</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>self.hitBlinkCounter</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>500</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring>draw_self();</codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.930000007152557</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.0020000000949949</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>30,8</point>
    <point>88,8</point>
    <point>88,96</point>
    <point>30,96</point>
  </PhysicsShapePoints>
</object>
