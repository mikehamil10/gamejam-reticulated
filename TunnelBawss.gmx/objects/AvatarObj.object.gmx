<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprAvatarIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprAvatarIdle</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>speedX</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>5</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0.3</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>isJumping</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>false</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>jumpForce</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>800</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>suck</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spriteMode</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrVacuumBuild()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canResetJump</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>false</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canResetJump</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>true</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// always keep our dude upright
phy_rotation = 0;

// ___________________________________________________________________ Movement

/*
XBox 360 Controls
=================
A: button1
B: button2
X: button3
Y: button4
*/

/*
Because sucking and blowing use the same animation, we can't use the sprite to identify
which mode the dwarf is in, so I made a spriteMode variable with the following meanings:
0: idle
1: walk right
2: walk left
3: jumping (falling?)
4: sucking
5: blowing
*/

// are we currently in the middle of the 'suck' animation?
if (self.spriteMode == 4) {
    // Yes. Don't allow movement, and wait until the animation is done
    if (image_index &gt; 11) {
        sprite_index = sprAvatarIdle;
        image_index = 1;
        //reset sucking counter so we can suck another object
        self.suck = 0;
        self.spriteMode = 0;
    } else if (image_index &gt; 6 &amp;&amp; self.suck == 0){
        //don't suck up more than one object
        self.suck = 1;
        //suck up the object in the middle of the animation
        var targetX = self.x;
        var targetY = self.y;
        //update the suck coordinates based on the direction we're facing
        targetX -= (image_xscale * 48);
        targetY += 48
        //check if the nearest object is within range and suckable
        var suckTarget = scrSuckObject(targetX, targetY);
        scrVacuumSuck(suckTarget);
    }
} else if (self.spriteMode == 5) {
    // Yes. Don't allow movement, and wait until the animation is done
    if (image_index &gt; 11) {
        sprite_index = sprAvatarIdle;
        image_index = 1;
        //reset sucking counter so we can spit out another object
        self.suck = 0;
        self.spriteMode = 0;
    } else if (image_index &gt; 6 &amp;&amp; self.suck == 0){
        //don't spit out more than one object
        self.suck = 1;
        //spit shit out
        var item = scrVacuumBlow();
        //find the location we want to start the object to appear around
        if(item != ""){
            var targetX = self.x;
            var targetY = self.y;
            targetX -= (image_xscale * 48);
            targetY += 48
            if(item == "dirt"){
                targetX = targetX - (targetX % 32)
                targetY = targetY - (targetY % 32)
                instance_create(targetX, targetY, objDirtBlock);
            }
        }
    }
} else {
    // No. Handle movement
    if (keyboard_check(vk_left) || (joystick_exists(1) &amp;&amp; joystick_direction(1) == vk_numpad4)) {
        phy_position_x -= self.speedX;
        if(self.isJumping){
            sprite_index = sprAvatarIdle;
        } else {
            sprite_index = sprAvatarWalk;
        }
        image_xscale = 1;
        self.spriteMode = 2;
    } else if (keyboard_check(vk_right) || (joystick_exists(1) &amp;&amp; joystick_direction(1) == vk_numpad6)) {
        phy_position_x += self.speedX;
        if(self.isJumping){
            sprite_index = sprAvatarIdle;
        } else {
            sprite_index = sprAvatarWalk;
        }
        image_xscale = -1;
        self.spriteMode = 1;
    } else {
        sprite_index = sprAvatarIdle;
        image_index = 1;
        self.spriteMode = 0;
    }
    
    // ________________________________________________________________ Jumping
    if (!self.isJumping &amp;&amp; (keyboard_check_pressed(vk_space) || (joystick_exists(1) &amp;&amp; joystick_check_button(1, 1)))) {
        show_debug_message("jump!" + string(self.isJumping));
        self.isJumping = true;
        self.canResetJump = false;
        alarm[0] = 10;
        show_debug_message("jump2!" + string(self.isJumping));
        physics_apply_impulse(phy_position_x, phy_position_y, 0, -self.jumpForce);
        self.spriteMode = 3;
    } 
    
    // ________________________________________________________________ Sucking
    if (keyboard_check_pressed(vk_lcontrol) || (joystick_exists(1) &amp;&amp; joystick_check_button(1, 3))) {
        isSucking = true;
        sprite_index = sprAvatarSuck;
        self.spriteMode = 4;
    } else if (keyboard_check_pressed(vk_lshift)) { //TODO: controller equivalent
        isSucking = true;
        sprite_index = sprAvatarSuck;
        self.spriteMode = 5;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>1</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.5</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>32,0</point>
    <point>96,0</point>
    <point>96,96</point>
    <point>32,96</point>
  </PhysicsShapePoints>
</object>
