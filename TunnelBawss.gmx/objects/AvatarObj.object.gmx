<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprAvatarIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprAvatarIdle</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Player Initialization

// _______________________________________________________Adjustable Properties
speedX    = 5;      // horizontal velocity
jumpForce = 1500;   // vertical velocity when jumping
image_speed   = 0.2;    // animation speed
health        = 3;      // "hit points" the player starts with

// __________________________________________________________Flags. Don't Edit!
isJumping = false;
suck = false;
spriteMode = 0;
canResetJump = false;
hitFrame = false;
suckDirection = "";

phy_fixed_rotation = true;

scrVacuumBuild()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>self.hitFrame = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// ___________________________________________________________________ Movement

/*
XBox 360 Controls
=================
A: button1
B: button2
X: button3
Y: button4
*/

/*
Because sucking and blowing use the same animation, we can't use the sprite to identify
which mode the dwarf is in, so I made a spriteMode variable with the following meanings:
0: idle
1: walk right
2: walk left
3: jumping (falling?)
4: sucking
5: blowing
*/

//move to the next room on esc
if (keyboard_check_pressed(vk_escape)){
    if(room_next(room) != -1)
    {
        room_goto(room_next(room));
    }
}

// are we currently in the middle of the 'suck' animation?
if (self.spriteMode == 4) {
    // Yes. Don't allow movement, and wait until the animation is done
    if (image_index &gt; 11) {
        sprite_index = sprAvatarIdle;
        image_index = 1;
        //reset sucking counter so we can suck another object
        self.suck = 0;
        self.spriteMode = 0;
    } else if (image_index &gt; 6 &amp;&amp; self.suck == 0){
        //don't suck up more than one object
        self.suck = 1;
        //suck up the object in the middle of the animation
        var targetX = self.x;
        var targetY = self.y;
        //update the suck coordinates based on the direction we're facing
        if(self.suckDirection == "side"){
            targetX -= (image_xscale * 48);
        } else if(self.suckDirection == "up"){
            targetY -= 96;
        } else if(self.suckDirection == "down"){
            targetY += 96;
        }
        targetY += 48;
        //check if the nearest object is within range and suckable
        var suckTarget = scrSuckObject(targetX, targetY);
        scrVacuumSuck(suckTarget);
    }
} else if (self.spriteMode == 5) {
    // Yes. Don't allow movement, and wait until the animation is done
    if (image_index &gt; 11) {
        sprite_index = sprAvatarIdle;
        image_index = 1;
        //reset sucking counter so we can spit out another object
        self.suck = 0;
        self.spriteMode = 0;
    } else if (image_index &gt; 6 &amp;&amp; self.suck == 0 ){
        //don't spit out more than one object
        self.suck = 1;
        //spit shit out
        var item = scrVacuumBlow();
        //find the location we want to start the object to appear around
        if(item != "" ){
            var targetX = self.x;
            var targetY = self.y;
            
            //extra check to ensure proper horizontal blowing target:
            if (image_xscale &gt; 0) targetX -= (image_xscale * 48);
            else targetX -= (image_xscale * 96);
            targetY += 96;
            
            if(item == "dirt"){
                show_debug_message("Pre dirt: x: " + string(targetX) + "   y: " + string(targetY));
                targetX = targetX - (targetX % 96)
                targetY = targetY - (targetY % 96)
                show_debug_message("Post dirt: x: " + string(targetX) + "   y: " + string(targetY));
                var i = 0;
                with(objDirtBlock){
                    if(i == 0){
                        show_debug_message("blowing dirt:");
                        if(place_free(targetX, targetY)){
                            instance_create(targetX, targetY, objDirtBlock);
                        } else {
                            scrVacuumSuck("dirt");
                        }
                        i = 1;
                    }
                }
            } else if(item == "bomb"){
                show_debug_message("Pre bomb: x: " + string(targetX) + "   y: " + string(targetY));
                targetX = targetX - (targetX % 96)
                targetY = targetY - (targetY % 96)
                show_debug_message("Post bomb: x: " + string(targetX) + "   y: " + string(targetY));
                var i = 0;
                with(objBomb){
                    if(i == 0){
                        show_debug_message("blowing bomb:");
                        if(place_free(targetX, targetY)){
                            instance_create(targetX, targetY, objBomb);
                        } else {
                            scrVacuumSuck("bomb");
                        }
                        i = 1;
                    }
                }
            }
            
        }//if blowing
    }
} else {
    // No. Handle movement
    if (keyboard_check(vk_left) || (joystick_exists(1) &amp;&amp; joystick_direction(1) == vk_numpad4)) {
        phy_position_x -= self.speedX;
        if(self.isJumping){
            sprite_index = sprAvatarIdle;
        } else {
            sprite_index = sprAvatarWalk;
        }
        image_xscale = 1;
        self.spriteMode = 2;
    } else if (keyboard_check(vk_right) || (joystick_exists(1) &amp;&amp; joystick_direction(1) == vk_numpad6)) {
        phy_position_x += self.speedX;
        if(self.isJumping){
            sprite_index = sprAvatarIdle;
        } else {
            sprite_index = sprAvatarWalk;
        }
        image_xscale = -1;
        self.spriteMode = 1;
    } else {
        sprite_index = sprAvatarIdle;
        image_index = 1;
        self.spriteMode = 0;
    }
    
    // ________________________________________________________________ Jumping
    if (!self.isJumping &amp;&amp; (keyboard_check_pressed(vk_space) || (joystick_exists(1) &amp;&amp; joystick_check_button(1, 1)))) {
        self.isJumping = true;
        self.canResetJump = false;
        physics_apply_impulse(phy_position_x, phy_position_y, 0, -self.jumpForce);
        self.spriteMode = 3;
    } 
    
    // ________________________________________________________________ Sucking
    if ((keyboard_check_pressed(vk_lcontrol) &amp;&amp; keyboard_check(vk_down)) || (joystick_exists(1) &amp;&amp; joystick_check_button(1, 3) &amp;&amp; joystick_direction(1) == vk_numpad2)){
        audio_play_sound(sndVacuumForward, 100, false);
        self.suckDirection = "down";
        isSucking = true;
        sprite_index = sprAvatarSuckDown;
        self.spriteMode = 4;
    } else if ((keyboard_check_pressed(vk_lcontrol) &amp;&amp; keyboard_check(vk_up)) || (joystick_exists(1) &amp;&amp; joystick_check_button(1, 3) &amp;&amp; joystick_direction(1) == vk_numpad8)){
        audio_play_sound(sndVacuumForward, 100, false);
        self.suckDirection = "up";
        isSucking = true;
        sprite_index = sprAvatarSuckUp;
        self.spriteMode = 4;
    } else if (keyboard_check_pressed(vk_lcontrol) || (joystick_exists(1) &amp;&amp; joystick_check_button(1, 3))) {
        audio_play_sound(sndVacuumForward, 100, false);
        self.suckDirection = "side";
        isSucking = true;
        sprite_index = sprAvatarSuck;
        self.spriteMode = 4;
    } else if (keyboard_check_pressed(vk_lshift) || (joystick_exists(1) &amp;&amp; joystick_check_button(1, 2))) {
        audio_play_sound(sndVacuumReverse, 100, false);
        isSucking = true;
        sprite_index = sprAvatarSuck;
        self.spriteMode = 5;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBlock">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>side_hit = place_meeting(phy_position_x + sign(hspeed), phy_position_y, other);
bottom_hit = place_meeting(phy_position_x, phy_position_y+1, other);

if (side_hit &amp;&amp; bottom_hit &amp;&amp; self.isJumping) {
    self.canResetJump = false;
}

else if (side_hit) {
    
}

else if (bottom_hit) {
    self.canResetJump = true;
    self.isJumping = false;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objExplosion">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!self.hitFrame){
    health--;
    health --;
    alarm[1] = 180;
    self.hitFrame = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="enemMole">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!self.hitFrame){
    health--;
    alarm[1] = 180;
    self.hitFrame = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="9">
      <action>
        <libid>1</libid>
        <id>223</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_current_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>223</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_current_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>1</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.5</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>96,16</point>
    <point>96,96</point>
    <point>32,96</point>
    <point>32,16</point>
  </PhysicsShapePoints>
</object>
